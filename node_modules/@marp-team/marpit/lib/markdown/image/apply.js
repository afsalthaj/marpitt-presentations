"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _marpit_plugin = _interopRequireDefault(require("../marpit_plugin"));

var _inline_style = _interopRequireDefault(require("../../helpers/inline_style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Marpit image apply plugin.
 *
 * Apply image style and color spot directive based on parsed meta.
 *
 * @alias module:markdown/image/apply
 * @param {MarkdownIt} md markdown-it instance.
 */
function applyImage(md) {
  // Build and apply image style
  md.inline.ruler2.push('marpit_apply_image', ({
    tokens
  }) => {
    for (const token of tokens) {
      if (token.type === 'image') {
        const {
          filters,
          height,
          width
        } = token.meta.marpitImage;
        const style = new _inline_style.default(token.attrGet('style'));
        if (width && !width.endsWith('%')) style.set('width', width);
        if (height && !height.endsWith('%')) style.set('height', height);

        if (filters) {
          const filterStyle = [];

          for (const fltrs of filters) filterStyle.push(`${fltrs[0]}(${fltrs[1]})`);

          token.meta.marpitImage.filter = filterStyle.join(' ');
          style.set('filter', token.meta.marpitImage.filter);
        }

        const stringified = style.toString();
        if (stringified) token.attrSet('style', stringified);
      }
    }
  }); // Shorthand for color spot directive

  md.core.ruler.after('marpit_inline_svg', 'marpit_apply_color', ({
    inlineMode,
    tokens
  }) => {
    if (inlineMode) return;
    let current;

    for (const t of tokens) {
      if (t.type === 'marpit_slide_open') current = t;
      if (t.type === 'marpit_slide_close') current = undefined; // Collect parsed inline image meta

      if (current && t.type === 'inline') {
        for (const tc of t.children) {
          if (tc.type === 'image') {
            const {
              background,
              color
            } = tc.meta.marpitImage;

            if (!background && color) {
              current.meta.marpitDirectives = _objectSpread({}, current.meta.marpitDirectives || {}, {
                color
              });
            }
          }
        }
      }
    }
  });
}

var _default = (0, _marpit_plugin.default)(applyImage);

exports.default = _default;